services:
  postgres:
    image: postgres:13.3
    container_name: auth_postgres
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      PG_DATA: "/var/lib/postgresql/data/pg_data"
    ports:
      - "5432:5432"
    volumes:
      - userdb-data:/var/lib/postgresql/data
      - ./user-service/migrations/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "4G"
    networks:
      auth:

  minio:
    image: minio/minio
    container_name: image_minio
    command: minio server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --show-error --fail http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "4G"
    networks:
      image:

  nginx:
    image: nginx:1.27
    container_name: api_gateway
    ports:
      - "8080:80"
    volumes:
      - ./api-gateway/build/nginx.conf:/etc/nginx/nginx.conf
    healthcheck:
     test: ["CMD-SHELL", "curl -f http://localhost/health"]
     interval: 10s
     timeout: 5s
     retries: 3
     start_period: 15s
    depends_on:
      - auth-service
      - image-service
    restart: unless-stopped
    networks:
      auth:
      image:

  redis:
    image: redis:7.4.2
    container_name: auth_redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USER: ${REDIS_USER}
      REDIS_USER_PASSWORD: ${REDIS_USER_PASSWORD}
    volumes:
      - authcache-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512M"
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    networks:
      auth:

  rabbitmq:
    image: rabbitmq:4.0.5-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASSWORD: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512M"
    networks:
      auth:
      image:

  auth-service :
    image: auth_backend:latest
    container_name: auth_backend
    ports:
      - "8082:8082"
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      auth:

  image-service:
    image: image_backend:latest
    container_name: image_backend
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      image:

volumes:
  userdb-data:
  minio-data:
  authcache-data:
  rabbitmq-data:

networks:
  auth:
    driver: bridge
  image:
    driver: bridge